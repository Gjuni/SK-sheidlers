객체 지향 프로그램

* 다형성 : 동적 함수 호출 OverLoading, OverRiding
	OverLoading : 같은 함수여도 같아도 매게변수 갯수, 타입에 따라 구분 가능
	OverRiding : 상속받은 메서드의 내용만 변경하는 것


* 추상화 : 
	프로그래밍의 추상화 : 단순히 시키는 작업 -> 복잡한 객체속성들을 일반화 하는 것
	객체 기술 추상화 : 

* 캡슐화 (객체화) : 관련된 것을 묶어놓는 것 (Class 정의)
	응집도 : 높을 수록 유리
		관련된 것이 많이 연결된 것이 좋음
	결합도 : 낮을 수록 유리
		서로 다른 것이 연결되지 않은게 좋음

* 일반화 (추상화) : 속성이나 기능의 재사용 관점에서만 보는 것은 극히 제한된 관점
	ex) 바나나, 사과, 배, 오랜지 -> 과일 이라고 일반화 함.

	ex) 과일 -> 바나나, 사과, 배, 오랜지 반대라면 특수화 라고 함

* 상속 : 


추상 클래스 : 프로그램에서 사용하지 않는다. 객체화하지 못함. new를 사용 불가
	abstract 추상 클래스는 목적 자체가 쓰려고 만든 것이 아닌 자식을 위해서 존재하는 것
	
	시그니처 : 나를 증명할 때 사용. (Overloading, OverRiding)
		시그니처로 자신의 함수를 구분한다. OverLoading 매개변수 종류나 갯수로 구분 가능

인터페이스 : 
	


UML에서 제약 조건이 존재하는데 이때 사용하게 되는 문자가 { } 중괄호이다.